{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmefmun\\\\OneDrive - PERSEUS MANAGEMENT GROUP INC\\\\Desktop\\\\Task-Manager-System\\\\TMS-FrontEnd\\\\src\\\\context\\\\TaskProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { FetchData } from '../utils/FetchData';\nimport { DeleteData } from '../utils/DeleteData';\nimport { PostData } from '../utils/PostData';\nimport { PutData } from '../utils/PutData';\nimport { useToken } from './TokenProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContext = /*#__PURE__*/createContext();\nexport function TaskProvider({\n  children\n}) {\n  _s();\n  const [task, setTask] = useState([]);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const {\n    token\n  } = useToken();\n\n  // Get all tasks by project id\n  const getTaskByProjectId = async id => {\n    const TaskApi = `https://localhost:7174/api/Tasks/project/${id}`;\n    const res = await FetchData(TaskApi, token);\n    setTask(res);\n  };\n  // Get task by Task id\n  const getTaskById = async id => {\n    const TaskApi = `https://localhost:7174/api/Tasks/${id}`;\n    const res = await FetchData(TaskApi, token);\n    setSelectedTask(res);\n  };\n  // remove task\n  const remove = async id => {\n    const deleteAPI = `https://localhost:7174/api/Tasks/${id}`;\n    await DeleteData(deleteAPI, token);\n    const newData = task.filter(d => d.id !== id);\n    setTask(newData);\n  };\n  // Create task\n  const create = async newTask => {\n    const CreateApi = `https://localhost:7174/api/Tasks`;\n    const res = await PostData(CreateApi, newTask, token);\n    return res;\n  };\n  // Update task\n  const update = async (id, updatedTask) => {\n    const UpdateApi = `https://localhost:7174/api/Tasks/${id}`;\n    const res = await PutData(UpdateApi, updatedTask, token);\n    return res;\n  };\n  // Assign task\n  const assignTask = async data => {\n    const UpdateApi = `https://localhost:7174/api/Tasks/assign_task`;\n    const res = await PutData(UpdateApi, data, token);\n    return res;\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      selectedTask,\n      task,\n      create,\n      remove,\n      update,\n      getTaskByProjectId,\n      getTaskById,\n      assignTask\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskProvider, \"nPuAjcO+iUXCXbsUEc2v5Zn/GLc=\", false, function () {\n  return [useToken];\n});\n_c = TaskProvider;\nexport function useTaskData() {\n  _s2();\n  return useContext(TaskContext);\n}\n_s2(useTaskData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","FetchData","DeleteData","PostData","PutData","useToken","jsxDEV","_jsxDEV","TaskContext","TaskProvider","children","_s","task","setTask","selectedTask","setSelectedTask","token","getTaskByProjectId","id","TaskApi","res","getTaskById","remove","deleteAPI","newData","filter","d","create","newTask","CreateApi","update","updatedTask","UpdateApi","assignTask","data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTaskData","_s2","$RefreshReg$"],"sources":["C:/Users/ahmefmun/OneDrive - PERSEUS MANAGEMENT GROUP INC/Desktop/Task-Manager-System/TMS-FrontEnd/src/context/TaskProvider.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { FetchData } from '../utils/FetchData';\r\nimport { DeleteData } from '../utils/DeleteData';\r\nimport { PostData } from '../utils/PostData';\r\nimport { PutData } from '../utils/PutData';\r\nimport { useToken } from './TokenProvider';\r\n\r\nconst TaskContext = createContext();\r\n\r\nexport function TaskProvider({ children }) {\r\n\r\n    const [task, setTask] = useState([]);\r\n    const [selectedTask, setSelectedTask] = useState(null);\r\n    const { token } = useToken()\r\n\r\n    // Get all tasks by project id\r\n    const getTaskByProjectId = async (id) => {\r\n        const TaskApi = `https://localhost:7174/api/Tasks/project/${id}`;\r\n        const res = await FetchData(TaskApi, token);\r\n        setTask(res)\r\n    }\r\n    // Get task by Task id\r\n    const getTaskById = async (id) => {\r\n        const TaskApi = `https://localhost:7174/api/Tasks/${id}`;\r\n        const res = await FetchData(TaskApi, token);\r\n        setSelectedTask(res)\r\n    }\r\n    // remove task\r\n    const remove = async (id) => {\r\n        const deleteAPI = `https://localhost:7174/api/Tasks/${id}`\r\n        await DeleteData(deleteAPI, token)\r\n        const newData = task.filter(d => d.id !== id)\r\n        setTask(newData);\r\n\r\n    };\r\n    // Create task\r\n    const create = async (newTask) => {\r\n        const CreateApi = `https://localhost:7174/api/Tasks`\r\n        const res = await PostData(CreateApi, newTask, token)\r\n        return res\r\n    };\r\n    // Update task\r\n    const update = async (id, updatedTask) => {\r\n        const UpdateApi = `https://localhost:7174/api/Tasks/${id}`\r\n        const res = await PutData(UpdateApi, updatedTask, token)\r\n        return res\r\n    };\r\n    // Assign task\r\n    const assignTask = async (data) => {\r\n        const UpdateApi = `https://localhost:7174/api/Tasks/assign_task`\r\n        const res = await PutData(UpdateApi, data, token)\r\n        return res\r\n    };\r\n    return (\r\n        <TaskContext.Provider value={{ selectedTask, task, create, remove, update, getTaskByProjectId, getTaskById, assignTask }}>\r\n            {children}\r\n        </TaskContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useTaskData() {\r\n    return useContext(TaskContext);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}